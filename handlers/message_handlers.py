from aiogram.types import  InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from db import GetDataFromDb, AddDataToDb, async_session
from main import bot
from utils import parse_user_items
from tg_message_data import Message
import os
TEST_MODE = os.getenv("TEST_MODE", "False") == "True"


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
def get_stat_keyboard():
    markup = InlineKeyboardMarkup(resize_keyboard=True)
    stat_button =InlineKeyboardButton(text="üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data='stat')
    markup.add(stat_button)
    return markup

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞
async def handle_send_token(message: Message):
    token = message.text.split()[1:]
    user_id = message.from_user.id

    async with async_session() as session:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
        if TEST_MODE:
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            await message.answer("–í—ã –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ. –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω (—Ñ–∏–∫—Ç–∏–≤–Ω–æ)!")
        else:
            # –†–µ–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
            user_tokens = await GetDataFromDb.get_tokens_by_user_id(session, user_id)
            if not user_tokens:
                await AddDataToDb.add_user_to_db(session, telegram_id=user_id, username=message.from_user.username, tokens=token)
            else:
                user_tokens.append(token)
                await AddDataToDb.update_user_tokens(session, user_id, user_tokens)
            await message.answer(f"–¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {token}!", reply_markup=get_stat_keyboard())

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ XLSX
async def handle_show_stats(callback_query: CallbackQuery):
    user_token = await GetDataFromDb.get_user_token(callback_query.from_user.id)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ
    
    if not user_token:
        await bot.answer("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω!")
        return
    
    # –ü–∞—Ä—Å–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ —Å–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await parse_user_items(user_token)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if isinstance(stats, str):
        await bot.answer(stats)
    else:
        response_message = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ –ø–æ –≤–∞—à–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º:\n"
        for stat in stats:
            response_message += (
                f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ: {stat['title']}\n"
                f"–í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤: {stat['calls']}\n"
                f"–û—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∏: {stat['answered']}\n"
                f"–ù–æ–≤—ã–µ –∑–≤–æ–Ω–∫–∏: {stat['new']}\n"
                f"–ù–æ–≤—ã–µ –∏ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∏: {stat['newAnswered']}\n"
                f"–î–∞—Ç–∞: {stat['date']}\n\n"
            )
        await bot.answer(response_message)
